{
  "publisher": "mdoaie",
  "name": "file-generator-task-runner",
  "displayName": "File Generator Task Runner",
  "version": "2.0.0",
  "description": "An extension to quickly generate new file base on the original file with new extension or .",
  "author": {
    "name": "mo doaie",
    "email": "m.doaie@yahoo.co.uk"
  },
  "homepage": "https://github.com/ccpu/vscode-file-generator-task-runner.git",
  "repository": {
    "type": "git",
    "url": "https://github.com/HardikModha/vscode-file-generator.git"
  },
  "keywords": [
    "vscode",
    "file generator",
    "file generator task runner",
    "code generator",
    "tests",
    "file generator",
    "create tests files",
    "run tasks"
  ],
  "categories": [
    "Programming Languages",
    "Snippets",
    "Other"
  ],
  "main": "./dist/extension",
  "engines": {
    "vscode": "^1.89.0"
  },
  "activationEvents": [
    "onLanguage:typescript",
    "onLanguage:javascript",
    "onLanguage:typescriptreact",
    "onLanguage:javascriptreact",
    "onCommand:fileGenTaskRunner.run"
  ],
  "contributes": {
    "commands": [
      {
        "command": "fileGenTaskRunner.run",
        "title": "Generate File"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "fileGenTaskRunner.run",
          "group": "2_workspace"
        }
      ],
      "editor/title/context": [
        {
          "command": "fileGenTaskRunner.run",
          "group": "2_workspace"
        }
      ],
      "editor/context": [
        {
          "command": "fileGenTaskRunner.run",
          "group": "2_workspace"
        }
      ]
    },
    "configuration": {
      "title": "Where to keep the new files?",
      "properties": {
        "fileGenTaskRunner.configs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "defaultLocationForFiles": {
                "type": "string",
                "default": "same location as source file",
                "enum": [
                  "same location as source file",
                  "project root"
                ],
                "description": "Where to keep the created new files?"
              },
              "label": {
                "type": "string",
                "description": "Name of task"
              },
              "description": {
                "type": "string"
              },
              "sourceDir": {
                "type": "string",
                "default": "src",
                "description": "Name of directory which contains all source files. This directory is not created when generating the directory structure for the test file."
              },
              "directoryName": {
                "type": "string",
                "description": "Name of the new directory."
              },
              "rootFilenameOrExtension": {
                "type": "string",
                "description": "To identify the root of the application. The root file name must be unique like 'package.json' that will be placed at the root of the js project.(extension must be start with dot eg. .csproj)"
              },
              "ignoreDirectories": {
                "type": "boolean",
                "description": "If true only files will be generated and parent directories will be ignored."
              },
              "rootDirName": {
                "type": "string",
                "description": "If set the original root dir will be change with given value. e.g. rootDirName='MyDir' Folder/test-file.js => MyDir/test-file.js"
              },
              "customFilesLocation": {
                "type": "string",
                "description": "Set this property in case you want to specify the custom location for new files."
              },
              "directorySuffix": {
                "type": "string",
                "description": "value will be added to root directory."
              },
              "filesSuffix": {
                "type": "string",
                "description": "Suffix to use for the new files."
              },
              "fileSuffixType": {
                "type": "string",
                "enum": [
                  "replace extension",
                  "extend extension",
                  "append to file name"
                ],
                "description": "If set to 'replace extension' file extension will be replaced with 'filesSuffix',if set to 'extend extension' file extension will be extended with 'filesSuffix' eg. .ts => .test.ts, if set to 'append to file name' 'filesSuffix' will be appended to file name."
              },
              "shouldSwitchToFile": {
                "type": "boolean",
                "default": true,
                "description": "Whether to switch to the new file or not after creating it."
              },
              "template": {
                "type": [
                  "array",
                  "object"
                ],
                "description": "Template to append to newly created file."
              },
              "useForwardSlash": {
                "type": "boolean",
                "default": true,
                "description": "If set to true will make backslash to forward slash, useful for windows and jest."
              },
              "supportedExtension": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [
                  "ts",
                  "tsx",
                  "js",
                  "jsx"
                ],
                "description": "Test supported Extension"
              },
              "watchCommands": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [
                  "--watch",
                  "dotnet watch"
                ],
                "description": "When file created for the first time the associated tasks should not run,unless a watch command detected."
              },
              "tasks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "task",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "Name of task"
                    },
                    "description": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "title": "task"
                      },
                      "description": "Arguments to pass to task"
                    },
                    "checkIfArgPathExist": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Will check if path exist for an arguments, the argument and path should be in one line => ['--config=some path to config'], if the path provided for --config not fund --config option will be removed from command. And error message displayed."
                    },
                    "showMessageIfPathNotExist": {
                      "type": "boolean",
                      "default": false,
                      "description": "Will display message if file path is not exist. referring to checkIfArgPathExist."
                    },
                    "userInputPrompt": {
                      "type": "array",
                      "items": {
                        "type": [
                          "object",
                          "array"
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Will show user input prompt to give a choice of options. for single prompt use array: [{ \"label\": \"--coverage\" }] , for In Sequence prompts use multi dimensional array: [[{ \"label\":\"--coverage\" }],[{ \"label\": \"--watch\" }]]"
                    },
                    "runTaskOnFileCreation": {
                      "type": "boolean",
                      "default": true,
                      "description": "If true task will run when file created, else it will only run when file already exist"
                    },
                    "useForwardSlash": {
                      "type": "boolean",
                      "default": true,
                      "description": "Will convert back slash to forward slash, Required for jest when running in windows"
                    },
                    "usePathFromBaseDirectory": {
                      "type": "boolean",
                      "default": true,
                      "description": "When set to true the workspace root path will be removed, Required for jest"
                    },
                    "shouldSwitchTerminalToCwd": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to switch terminal to cwd."
                    },
                    "shouldSwitchToFile": {
                      "type": "boolean",
                      "default": true,
                      "description": "Whether to switch to the new file or not."
                    },
                    "terminalInstanceType": {
                      "type": "string",
                      "default": "label",
                      "enum": [
                        "label",
                        "command",
                        "new"
                      ],
                      "description": "If set to 'label' created terminal instance will be reused by task with label name, if set to 'command' created terminal will be reused by task with same arguments and commands, if set 'new' terminal will be created each time task runs."
                    },
                    "command": {
                      "type": "string",
                      "default": "jest"
                    },
                    "default": {
                      "type": "boolean",
                      "description": "When unable to detect task, will run task with default set to true"
                    }
                  },
                  "required": [
                    "label"
                  ]
                },
                "description": "Whether to switch to the story file or not after creating it."
              }
            },
            "required": [
              "label"
            ]
          }
        }
      }
    }
  },
  "scripts": {
    "compile": "pnpm run fix:all &&  node esbuild.js",
    "watch": "node esbuild.js --watch",
    "tsc:watch": "tsc -p ./ --watch --noEmit",
    "clean": "rimraf ./dist",
    "lint": "eslint",
    "lint:fix": "eslint --fix",
    "format": "prettier --check .",
    "format:fix": "prettier --write .",
    "fix:all": "pnpm run lint:fix && pnpm run format:fix",
    "test": "vitest run --coverage",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest run --coverage",
    "typecheck": "tsc --noEmit",
    "deps:update": "npx taze -r -w && pnpm install",
    "deps:update:major": "npx taze major -r -w && pnpm install",
    "prepare": "husky",
    "build": "pnpm run compile",
    "package:vsix": "node esbuild.js --production && npx vsce package --no-dependencies",
    "install:local": "pnpm run package:vsix && node -e \"const fs = require('fs'); const vsix = fs.readdirSync('.').find(f => f.endsWith('.vsix')); if(vsix) require('child_process').execSync('code --install-extension ' + vsix, {stdio: 'inherit'}); else console.error('No .vsix file found');\""
  },
  "dependencies": {
    "@pixpilot/eslint-config": "^2.4.2",
    "@types/is-windows": "^1.0.2",
    "@types/mkdirp": "^2.0.0",
    "find-up": "^7.0.0",
    "is-windows": "^1.0.2",
    "mkdirp": "^3.0.1"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@pixpilot/dev-config": "^2.1.0",
    "@types/node": "^24.2.1",
    "@types/vscode": "^1.89.0",
    "@vitest/coverage-istanbul": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.9",
    "eslint": "^9.33.0",
    "husky": "^9.1.7",
    "jiti": "^2.5.1",
    "lint-staged": "^16.1.5",
    "prettier": "^3.6.2",
    "rimraf": "^6.0.1",
    "typescript": "^5.9.2",
    "vitest": "^3.2.4",
    "vscode-test": "^1.6.1"
  },
  "__metadata": {
    "size": 62358128
  }
}
